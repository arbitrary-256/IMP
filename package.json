{
  "name": "inventory-management-platform",
  "version": "0.9.1",
  "license": "Unlicense",
  "description": "Inventory Management Platform",
  "productName": "IMP",
  "author": "Brandon Shockley <bms1991@gmail.com> (https://github.com/Zindrek)",
  "repository": "https://github.com/Zindrek/IMP",
  "copyright": "Â© 2022",
  "private": true,
  "type": "module",
  "scripts": {
    "readme": "echo 'run the following command:' && echo 'npm run setup' && echo 'and then run the appropriate command below:' && echo 'Windows: yarn install:rust-win' && echo 'Linux: yarn install:rust' && echo 'Intel Macs: yarn install:rust' && echo 'Apple Silicon Macs: yarn install:rust-m1'",
    "setup": "npm install -g yarn rimraf typescript && yarn && yarn readme",
    "install:rust": "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh",
    "install:rust-m1": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" && echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> ~/.zprofile && eval \"$(/opt/homebrew/bin/brew shellenv)\" && arch -arm64 brew install -s cairo giflib jpeg libpng librsvg libvips pango pkg-config vips && yarn install:rust",
    "install:rust-win": "echo 'download a rust GUI installer from https://win.rustup.rs/x86_64 or https://win.rustup.rs/i686'",
    "update:rust": "cd src-tauri && rustup update && cargo update && cd ..",
    "clean:all": "redrun -s lint clean:docker clean:build clean:coverage clean:express clean:documentation clean:mariadb clean:output clean:react clean:ecmascript",
    "clean:build": "rimraf build && mkdir build",
    "clean:coverage": "rimraf coverage && mkdir coverage",
    "clean:documentation": "rimraf docs && mkdir docs",
    "clean:docker": "docker rmi -f imp_express:alpine > /dev/null 2>&1",
    "clean:express": "rimraf express && mkdir express",
    "clean:react": "rimraf build && mkdir build",
    "clean:mariadb": "rimraf mariadbdata && mkdir mariadbdata",
    "clean:ecmascript": "rimraf .VSCodeCounter package-lock.json yarn.lock yarn-error.log && rimraf node_modules",
    "clean:output": "rimraf output && mkdir output",
    "clean:tauri": "rimraf src-tauri/target src-tauri/Cargo.lock",
    "lint": "yarn prettier --write .",
    "dev:react": "yarn react-scripts start",
    "dev:tauri": "tauri dev",
    "build:all": "redrun -s build:express package:installer package:zip",
    "build:express": "tsc src-api/impAPI.ts --skipLibCheck --removeComments --outDir ./express",
    "build:react": "yarn react-scripts build",
    "build:tauri": "tauri build",
    "build:zip": "ts-node-dev -- src/scripts/webzip.ts",
    "release": "redrun -s clean:all setup update:rust build:all package:move-releases",
    "package:installer": "redrun -s build:tauri package:move-releases",
    "package:move-releases": "copyfiles src-tauri/target/release/bundle/ output && rimraf src-tauri/target/release/bundle",
    "package:zip": "redrun -s tsconfig:backup tsconfig:ts-node build:zip tsconfig:normal",
    "tsconfig:backup": "rimraf src/scripts/configfiles/backup && mkdir src/scripts/configfiles/backup && copyfiles ./tsconfig.json ./src/scripts/configfiles/backup",
    "tsconfig:normal": "rimraf ./tsconfig.json && sleep 1 && copyfiles --up 4 ./src/scripts/configfiles/normal/tsconfig.json ./*",
    "tsconfig:ts-node": "rimraf ./tsconfig.json && sleep 1 && copyfiles --up 4 ./src/scripts/configfiles/script/tsconfig.json ./*",
    "icon": "yarn tauricon --log src-tauri/icons/app-icon.png --target src-tauri/icons",
    "updater-sign": "tauri signer generate",
    "documentation": "redrun -s clean:documentation lint && typedoc",
    "test": "jest --watch",
    "test:code-coverage": "jest --coverage --passWithNoTests",
    "new:express": "redrun -s stack:down clean:docker clean:express stack:up",
    "new:mariadb": "redrun -s stack:down clean:docker clean:mariadb stack:up",
    "stack:dev": "echo \"[Crtl+C] to quit\" && echo \"add ' | grep [express/react/mariadb] to filter by container'\" && sleep 3 && docker-compose logs -f",
    "stack:express": "redrun -s stack:down clean:docker build:express",
    "stack:down": "docker-compose down --remove-orphans && yarn clean:docker",
    "stack:up": "redrun -s stack:up docker-watch"
  },
  "dependencies": {
    "@emotion/react": "latest",
    "@emotion/styled": "latest",
    "@fontsource/alegreya-sans-sc": "latest",
    "@mui/icons-material": "latest",
    "@mui/material": "latest",
    "@mui/styles": "latest",
    "@tauri-apps/api": "1.0.0-rc.4",
    "@testing-library/jest-dom": "latest",
    "@testing-library/react": "latest",
    "@testing-library/user-event": "latest",
    "express": "latest",
    "mysql": "latest",
    "node": "latest",
    "react": "latest",
    "react-dom": "latest",
    "react-dropzone": "latest",
    "source-map-support": "latest",
    "ts-node-dev": "latest",
    "typescript": "latest"
  },
  "devDependencies": {
    "@babel/core": "latest",
    "@babel/plugin-transform-modules-commonjs": "latest",
    "@babel/preset-react": "latest",
    "@mui/types": "latest",
    "@tauri-apps/cli": "1.0.0-rc.9",
    "@tauri-apps/tauricon": "github:tauri-apps/tauricon",
    "@types/copyfiles": "latest",
    "@types/express": "latest",
    "@types/jest": "latest",
    "@types/mysql": "latest",
    "@types/node": "latest",
    "@types/prettier": "latest",
    "@types/react": "latest",
    "@types/react-dom": "latest",
    "async": "latest",
    "copyfiles": "latest",
    "dotenv": "latest",
    "jest": "latest",
    "jszip": "latest",
    "nodemon": "latest",
    "prettier": "latest",
    "react-scripts": "latest",
    "redrun": "latest",
    "typedoc": "latest"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 edge version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "babel": {
    "env": {
      "test": {
        "plugins": [
          "@babel/plugin-transform-modules-commonjs"
        ]
      }
    },
    "presets": [
      "@babel/preset-env",
      "@babel/preset-typescript",
      "@babel/preset-react"
    ]
  },
  "eslintConfig": {
    "ignorePatterns": [
      "express/",
      "node_modules/",
      "mariadbdata/"
    ],
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "jest": {
    "collectCoverageFrom": [
      "**/*.{ts,tsx}",
      "!**/node_modules/**",
      "!**/build/**",
      "!**/docs/**",
      "!**/output/**",
      "!**/public/**"
    ],
    "coveragePathIgnorePatterns": [
      "/build/",
      "/dist/",
      "/docs/",
      "/public/",
      "/node_modules/",
      "/src-tauri/",
      "/src/index.tsx",
      "/src/interfaces/",
      "/src/react-app-env.d.ts",
      "/src/scripts/",
      "/src/tests/",
      "/src/typings/"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 100,
        "functions": 100,
        "lines": 100,
        "statements": 100
      }
    },
    "displayName": {
      "name": "inventory-management-platform",
      "color": "blue"
    },
    "moduleDirectories": [
      "node_modules",
      "src"
    ],
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "jsx",
      "json",
      "css",
      "gif",
      "jpg",
      "jpeg",
      "png",
      "svg"
    ],
    "moduleNameMapper": {
      "\\.(css)$": "<rootDir>/src/typings/css.d.ts",
      "\\.(gif)$": "<rootDir>/src/typings/gif.d.ts",
      "\\.(jp?eg)$": "<rootDir>/src/typings/jpg.d.ts",
      "\\.(png)$": "<rootDir>/src/typings/png.d.ts",
      "\\.(svg)$": "<rootDir>/src/typings/svg.d.ts"
    },
    "transform": {
      "^.+\\.[jt]sx?$": "babel-jest"
    }
  },
  "prettier": {
    "arrowParens": "always",
    "bracketSameLine": true,
    "bracketSpacing": true,
    "filepath": ".",
    "jsxSingleQuote": true,
    "requirePragma": true,
    "parser": "babel-ts",
    "printWidth": 200,
    "quoteProps": "consistent",
    "semi": false,
    "singleAttributePerLine": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "none"
  }
}

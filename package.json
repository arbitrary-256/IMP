{
  "name": "inventory-management-platform",
  "version": "0.9.1",
  "license": "Unlicense",
  "description": "Inventory Management Platform",
  "productName": "IMP",
  "author": "Brandon Shockley <bms1991@gmail.com> (https://github.com/Zindrek)",
  "repository": "https://github.com/Zindrek/IMP",
  "copyright": "Â© 2022",
  "private": true,
  "type": "module",
  "main": "build/index.js",
  "scripts": {
    "autoconfigure": "clear && echo '(ðŸ‘ºautoconfigure) automatically configuring development environmentâ€¦,' && npm run setup:scripts && yarn setup:modules && echo '<-- ðŸ‘ºautoconfigureðŸ˜ˆ âœ…'",
    "autohotdev": "clear && echo '(ðŸ‘ºautohotdev) automatically hot-reloading development environmentâ€¦,' && npm run autoconfigure && yarn hot:bin",
    "autopack": "clear && echo '(ðŸ‘ºautopack) automatically packing production releaseâ€¦' && npm run autoconfigure && redrun -s clean:all setup:modules package:api package:bin docs:generate",
    "clean:all": "echo '(ðŸ‘ºclean:all) cleaning environmentâ€¦' && redrun -s clean:artifacts clean:backend clean:node && clear && echo '(ðŸ‘º-clean:all) cleaned environment!' && echo '<-- ðŸ‘ºclean:allðŸ˜ˆ âœ…'",
    "clean:api": "echo '(ðŸ‘ºclean:api) cleaning /apiâ€¦' && rimraf api && mkdir api && echo '<-- ðŸ‘ºclean:apiðŸ˜ˆ âœ…'",
    "clean:artifacts": "echo '(ðŸ‘ºclean:artifacts) cleaning artifactsâ€¦' && redrun -s clean:build clean:coverage clean:docs clean:bin clean:output",
    "clean:backend": "echo '(ðŸ‘ºclean:backend) cleaning backend dataâ€¦' && redrun -s clean:api clean:db",
    "clean:build": "echo '(ðŸ‘ºclean:build) cleaning /buildâ€¦' && rimraf build && mkdir build && echo '<-- ðŸ‘ºclean:buildðŸ˜ˆ âœ…'",
    "clean:coverage": "echo '(ðŸ‘ºclean:coverage) cleaning /coverageâ€¦' && rimraf coverage && mkdir coverage && echo '<-- ðŸ‘ºclean:coverageðŸ˜ˆ âœ…'",
    "clean:docs": "echo '(ðŸ‘ºclean:docs) cleaning /docsâ€¦' && rimraf docs && mkdir docs && echo '<-- ðŸ‘ºclean:docsðŸ˜ˆ âœ…'",
    "clean:bin": "echo '(ðŸ‘ºclean:bin) cleaning /src-binâ€¦' && rimraf src-bin/target src-bin/Cargo.lock && echo '<-- ðŸ‘ºclean:binðŸ˜ˆ âœ…'",
    "clean:node": "echo '(ðŸ‘ºclean:node) cleaning nodeâ€¦' && yarn clean:prettier && rimraf node_modules .VSCodeCounter package-lock.json && echo '<-- ðŸ‘ºclean:nodeðŸ˜ˆ âœ…'",
    "clean:output": "echo '(ðŸ‘ºclean:output) cleaning /outputâ€¦' && rimraf output && mkdir output && echo '<-- ðŸ‘ºclean:outputðŸ˜ˆ âœ…'",
    "clean:prettier": "echo '(ðŸ‘ºclean:prettier) running prettierâ€¦' && yarn prettier --loglevel error --write . && echo '<-- ðŸ‘ºclean:prettierðŸ˜ˆ âœ…'",
    "clean:db": "echo '(ðŸ‘ºclean:db) cleaning /dbâ€¦' && rimraf db && mkdir db && echo '<-- ðŸ‘ºclean:dbðŸ˜ˆ âœ…'",
    "docker:api": "echo '(ðŸ‘ºdocker:api) recreating imp_api serviceâ€¦' && redrun -s docker:down clean:api package:api docker:up",
    "docker:down": "echo '(ðŸ‘ºdocker:down) collapsing stackâ€¦' && docker-compose down --remove-orphans && docker rmi -f imp_api:alpine && docker rmi -f imp_interface:alpine && echo '<-- ðŸ‘ºdocker:downðŸ˜ˆ âœ…'",
    "docker:up": "echo '(ðŸ‘ºdocker:up) launching stackâ€¦' && docker-compose up --build -d && echo '<-- ðŸ‘ºdocker:upðŸ˜ˆ âœ…'",
    "docker:sql": "echo '(ðŸ‘ºdocker:sql) recreating imp_sql serviceâ€¦' && redrun -s docker:down clean:sql docker:up",
    "docs:generate": "echo '(ðŸ‘ºdocs:generate) running TypeDoc /docsâ€¦' && yarn clean:docs && typedoc && echo '(ðŸ‘ºðŸ‘ºðŸ‘ºdocs:generate) successfully populated /docs' && echo '<-- ðŸ‘ºdocs:generateðŸ˜ˆ âœ…'",
    "docs:readme": "echo '(ðŸ‘º-docs:readme)' && echo '(ðŸ‘º-docs:readme) please run `yarn setup:scripts` once when you first clone this repo (and if needed again), and then please run:' && echo '(ðŸ‘º-docs:readme)' && echo '(ðŸ‘º-docs:readme) npm run setup:scripts(or setup:m1-scripts)' && echo '(ðŸ‘º-docs:readme)' && echo '(ðŸ‘º-docs:readme) and then please follow the next step below based on your operating system:' && echo '(ðŸ‘º-docs:readme) Windows:' && echo '(ðŸ‘º-docs:readme) please download a rust GUI installer from https://win.rustup.rs/x86_64 or https://win.rustup.rs/i686' && echo '(ðŸ‘º-docs:readme) Linux:' && echo '(ðŸ‘º-docs:readme) yarn setup:rust' && echo '(ðŸ‘º-docs:readme) macOS:' && echo '(ðŸ‘º-docs:readme) yarn setup:rust' && echo '(ðŸ‘º-docs:readme)' && echo '<-- ðŸ‘ºdocs:readmeðŸ˜ˆ âœ…'",
    "hot:prettier": "echo '(ðŸ‘ºhot:prettier) watching prettier in hot-reload development modeâ€¦' && yarn prettier --watch --loglevel error --write . && echo '<-- ðŸ‘ºhot:prettierðŸ˜ˆ âœ…'",
    "hot:ui": "echo '(ðŸ‘ºhot:ui) watching React in hot-reload development modeâ€¦' && yarn hot:prettier & yarn react-scripts start && echo '<-- hot:ui âœ…'",
    "hot:bin": "echo '(ðŸ‘ºhot:bin) watching Tauri in hot-reload development modeâ€¦' && redrum -p hot:prettier & tauri dev && echo '<-- ðŸ‘ºhot:binðŸ˜ˆ âœ…'",
    "hot:docs": "echo '(ðŸ‘ºhot:docs) watching TypeDoc in hot-reload development modeâ€¦' && yarn clean:docs & typedoc --watch && echo '<-- ðŸ‘ºhot:docsðŸ˜ˆ âœ…'",
    "package:api": "echo '(ðŸ‘ºpackage:api) transpiling apiâ€¦' && tsc src-api/impAPI.ts --skipLibCheck --removeComments --outDir api && echo '<-- ðŸ‘ºpackage:apiðŸ˜ˆ âœ…'",
    "package:bin": "echo '(ðŸ‘ºpackage:bin) compiling native installerâ€¦' && echo '(ðŸ‘ºðŸ‘ºpackage:bin) â€¦this may take a few minutes, pease be patientâ€¦' && tauri build && echo '(ðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºpackage:bin) moving distributable installers to output folderâ€¦' && yarn copyfiles --error --up 5 ./src-bin/target/release/bundle/**/* ./output && echo '(ðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºpackage:bin) created desktop application installer in /output' && echo '<-- ðŸ‘ºpackage:binðŸ˜ˆ âœ…'",
    "package:icon": "echo '(ðŸ‘ºpackage:icon) making iconsâ€¦' && yarn tauricon --log src-bin/icons/app-icon.png --target src-bin/icons  && echo '<-- ðŸ‘ºpackage:iconsðŸ˜ˆ âœ…'",
    "package:ui": "echo '(ðŸ‘ºpackage:ui) transpiling interfaceâ€¦' && yarn react-scripts build && echo '(ðŸ‘ºðŸ‘ºðŸ‘ºpackage:ui) React application built successfully' && echo '(ðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºpackage:ui) zipping directoryâ€¦' && redrun -s package:zip",
    "package:updater": "echo '(ðŸ‘ºpackage:updater) auto-updaterâ€¦' && tauri signer generate && echo '<-- ðŸ‘ºpackage:updaterðŸ˜ˆ âœ…'",
    "package:zip": "echo '(ðŸ‘ºpackage:zip) switching to scripting modeâ€¦' && rimraf ./tsconfig.json && sleep 1 && yarn copyfiles --error --up 4 ./src-ui/scripts/configfiles/script/* ./ && sleep 1 && echo '(ðŸ‘ºðŸ‘ºpackage:zip) switched to scripting modeâ€¦' && echo '(ðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºpackage:zip) zipping directory for distributionâ€¦' && ts-node-dev -- src/scripts/webzip.ts && echo '(ðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºpackage:zip) zip created in /output directoryâ€¦' && echo '(ðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºpackage:zip) switching back to normal modeâ€¦' && rimraf ./tsconfig.json && sleep 1 && yarn copyfiles --error --up 4 ./src-ui/scripts/configfiles/normal/* ./ && echo '(ðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºðŸ‘ºpackage:zip) switched back to normal mode' && echo '<-- ðŸ‘ºpackage:zipðŸ˜ˆ âœ…'",
    "setup:modules": "echo '(ðŸ‘ºsetup:modules) installing package-scoped dependencies global yarnâ€¦' && yarn && echo '<-- ðŸ‘ºsetup:modulesðŸ˜ˆ âœ…'",
    "setup:rust": "echo '(ðŸ‘ºsetup:rust) installing rust toolchainâ€¦' && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh && echo '<-- ðŸ‘ºsetup:rustðŸ˜ˆ âœ…'",
    "setup:rustup": "echo '(ðŸ‘ºsetup:rustup) updating rust toolchainâ€¦' && cd src-bin && rustup update && cargo update && cd .. && echo '<-- ðŸ‘ºsetup:rustupðŸ˜ˆ âœ…'",
    "setup:scripts": "echo '(ðŸ‘ºsetup:scripts) installing global-scoped dependenciesâ€¦' && npm install -g @types/copyfiles copyfiles redrun rimraf typescript yarn && echo '<-- ðŸ‘ºsetup:scriptsðŸ˜ˆ âœ…'",
    "test:coverage": "echo '(ðŸ‘ºtest:coverge) measuring code coverage of unit testsâ€¦' && jest --coverage --passWithNoTests",
    "test:now": "echo '(ðŸ‘ºtest:now) running unit testsâ€¦' && jest --passWithNoTests",
    "test:watch": "echo '(ðŸ‘ºtest:watch) watching unit testsâ€¦' && jest --watch --passWithNoTests"
  },
  "dependencies": {
    "@emotion/react": "latest",
    "@emotion/styled": "latest",
    "@fontsource/alegreya-sans-sc": "latest",
    "@mui/icons-material": "latest",
    "@mui/material": "latest",
    "@mui/styles": "latest",
    "@tauri-apps/api": "1.0.0-rc.4",
    "@testing-library/jest-dom": "latest",
    "@testing-library/react": "latest",
    "@testing-library/user-event": "latest",
    "mysql": "latest",
    "node": "latest",
    "react": "latest",
    "react-dom": "latest",
    "react-dropzone": "latest",
    "source-map-support": "latest",
    "ts-node-dev": "latest",
    "typescript": "latest"
  },
  "devDependencies": {
    "@babel/core": "latest",
    "@babel/plugin-transform-modules-commonjs": "latest",
    "@babel/preset-react": "latest",
    "@mui/types": "latest",
    "@tauri-apps/cli": "1.0.0-rc.9",
    "@tauri-apps/tauricon": "github:tauri-apps/tauricon",
    "@types/copyfiles": "latest",
    "@types/express": "latest",
    "@types/jest": "latest",
    "@types/mysql": "latest",
    "@types/prettier": "latest",
    "@types/react": "latest",
    "@types/react-dom": "latest",
    "async": "latest",
    "copyfiles": "latest",
    "dotenv": "latest",
    "express": "latest",
    "jest": "latest",
    "jszip": "latest",
    "nodemon": "latest",
    "prettier": "latest",
    "react-scripts": "latest",
    "typedoc": "latest"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 edge version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "babel": {
    "env": {
      "test": {
        "plugins": [
          "@babel/plugin-transform-modules-commonjs"
        ]
      }
    },
    "presets": [
      "@babel/preset-env",
      "@babel/preset-typescript",
      "@babel/preset-react"
    ]
  },
  "eslintConfig": {
    "ignorePatterns": [
      "api/",
      "node_modules/",
      "database/"
    ],
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "jest": {
    "collectCoverageFrom": [
      "**/*.{ts,tsx}",
      "!**/node_modules/**",
      "!**/build/**",
      "!**/docs/**",
      "!**/output/**",
      "!**/public/**"
    ],
    "coveragePathIgnorePatterns": [
      "/build/",
      "/dist/",
      "/docs/",
      "/public/",
      "/node_modules/",
      "/src-bin/",
      "/src-ui/index.tsx",
      "/src-ui/interfaces/",
      "/src-ui/react-app-env.d.ts",
      "/src-ui/scripts/",
      "/src-ui/tests/",
      "/src-ui/typings/"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 100,
        "functions": 100,
        "lines": 100,
        "statements": 100
      }
    },
    "displayName": {
      "name": "inventory-management-platform",
      "color": "blue"
    },
    "moduleDirectories": [
      "node_modules",
      "src-api",
      "src-bin",
      "src-ui"
    ],
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "jsx",
      "json",
      "css",
      "gif",
      "jpg",
      "jpeg",
      "png",
      "svg"
    ],
    "moduleNameMapper": {
      "\\.(css)$": "<rootDir>/src-ui/typings/css.d.ts",
      "\\.(gif)$": "<rootDir>/src-ui/typings/gif.d.ts",
      "\\.(jp?eg)$": "<rootDir>/src-ui/typings/jpg.d.ts",
      "\\.(png)$": "<rootDir>/src-ui/typings/png.d.ts",
      "\\.(svg)$": "<rootDir>/src-ui/typings/svg.d.ts"
    },
    "transform": {
      "^.+\\.[jt]sx?$": "babel-jest"
    }
  },
  "prettier": {
    "arrowParens": "always",
    "bracketSameLine": true,
    "bracketSpacing": true,
    "filepath": ".",
    "jsxSingleQuote": true,
    "requirePragma": true,
    "parser": "babel-ts",
    "printWidth": 200,
    "quoteProps": "consistent",
    "semi": false,
    "singleAttributePerLine": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "none"
  }
}

{
  "name": "inventory-management-platform",
  "version": "0.9.1",
  "license": "Unlicense",
  "description": "Inventory Management Platform",
  "productName": "IMP",
  "author": "Brandon Shockley <bms1991@gmail.com> (https://github.com/Zindrek)",
  "repository": "https://github.com/Zindrek/IMP",
  "copyright": "Â© 2022",
  "keywords": [],
  "private": true,
  "scripts": {
    "readme": "echo && echo use these commands to learn more: && echo && echo 'yarn readme-doc' && echo 'yarn readme-setup' && echo 'yarn readme-imp' && echo 'yarn readme-tart' && echo 'yarn readme-test'",
    "readme-setup": "echo && echo setup scripts configure project dependencies && echo && echo setup-m1 fixes some issues with the Apple Silicon build && echo setup-yarn installs yarn && echo setup-rust installs rust for macOS and linux",
    "setup-m1": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" && echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> ~/.zprofile && eval \"$(/opt/homebrew/bin/brew shellenv)\" && arch -arm64 brew install -s cairo giflib jpeg libpng librsvg libvips pango pkg-config vips && echo finished Apple Silicon setup",
    "setup-yarn": "npm install -g yarn && yarn && echo to finish setup run 'yarn setup-rust' for linux / macOS or && echo use the graphical installer for 64-bit Windows https://win.rustup.rs/x86_64 or 32-bit Windows https://win.rustup.rs/i686",
    "setup-rust": "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh",
    "readme-doc": "echo && echo doc scripts facilitate documentation of the project && echo && echo doc generates automatic documentation using the typedoc npm package",
    "doc": "yarn tart-clean && yarn && yarn tart-pretty && yarn typedoc",
    "readme-test": "echo && echo test scripts facilitate testing of the project && echo && echo test-watch watches the project for changes while automatically running changed tests && echo test-cover checks automatic test coverage",
    "test-watch": "jest --watch",
    "test-cover": "jest --coverage --passWithNoTests",
    "readme-imp": "echo && echo imp scripts perform convenience features for this project && echo && echo imp-up deploys this repo using docker-compose.yml && echo imp-new clears your data and deploys a fresh copy && echo imp-down ends that deployment && echo imp-clean-db deletes the database && echo imp-clean-api deletes the built api && echo imp-clean-all deletes the database and the built api && echo imp-api-watch transpiles the TypeScript API in watch mode for development && echo imp-api-build outputs an API build optimized suitable for use in production",
    "imp-new": "yarn imp-down && yarn tart-clean && yarn imp-clean-all && yarn && yarn imp-up",
    "imp-api": "yarn imp-clean-docker && yarn imp-clean-api && yarn imp-api-build && docker-compose up -d",
    "imp-test": "yarn imp-down && yarn imp-clean-docker && yarn imp-up",
    "imp-test-new": "yarn imp-clean-all && docker rm -f imp-database-1 && yarn imp-up",
    "imp-up": "yarn imp-api-build && yarn react-scripts build && docker-compose up -d",
    "imp-down": "docker-compose down --remove-orphans",
    "imp-api-logs": "docker logs imp-api-1",
    "imp-maria-logs": "docker logs imp-database-1",
    "imp-react-logs": "docker logs imp-webapp-1",
    "imp-compose-logs": "docker-compose logs",
    "imp-api-watch": "tsc src-api/api.ts --watch --skipLibCheck --removeComments --outDir ./backend",
    "imp-api-build": "tsc src-api/api.ts --skipLibCheck --removeComments --outDir ./backend",
    "imp-clean-api": "rimraf backend && mkdir backend",
    "imp-clean-db": "rimraf mariadbdata && mkdir mariadbdata",
    "imp-clean-docker": "docker rmi -f imp_api",
    "imp-clean-all": "yarn imp-clean-db && yarn imp-clean-api && yarn imp-clean-docker",
    "readme-tart": "echo && echo tart scripts perform convenience features for the tart template && echo && echo tart starts a live development environment tauri app && echo tart-build builds the optimized frontend && echo tart-bundle builds the distributable tauri binary for your OS && echo tart-zip zips the build folder for transfer to a production webserver && echo tart-clean deletes common build artifacts && echo tart-rustup updates the rust dependencies && echo tart-icon builds icon files from the image at src-tauri/icons/app-icon.png && echo tart-updater-sign creates the signature for the tauri autoupdater && echo tart-prep changes the tsconfig.json to run ts-node scripts && echo tart-pretty runs prettier && echo tart-cleanup changes the tsconfig.json back to the original tsconfig.json",
    "tart": "tauri dev",
    "tart-build": "tauri build",
    "tart-bundle": "yarn tart-rustup && yarn tart-build && mkdir output && mv src-tauri/target/release/bundle/* output && yarn tart-zip",
    "tart-zip": "yarn tart-prep && yarn ts-node src/scripts/utility/webzip.ts && yarn tart-cleanup",
    "tart-clean": "rimraf .VSCodeCounter build coverage node_modules output src-tauri/target package-lock.json yarn.lock yarn-error.log src-tauri/Cargo.lock",
    "tart-rustup": "yarn tart-clean && yarn && cd src-tauri && rustup update && cargo update && cd ..",
    "tart-icon": "yarn tauricon --log src-tauri/icons/app-icon.png --target src-tauri/icons",
    "tart-updater-sign": "tauri signer generate",
    "tart-prep": "echo running ts-node script && cp ./src/scripts/tsnode/scripts.tsconfig.json ./tsconfig.json",
    "tart-cleanup": "cp ./src/scripts/tsnode/regular.tsconfig.json ./tsconfig.json",
    "tart-pretty": "node node_modules/.bin/prettier --write ."
  },
  "dependencies": {
    "@emotion/react": "latest",
    "@emotion/styled": "latest",
    "@fontsource/alegreya-sans-sc": "latest",
    "@mui/icons-material": "latest",
    "@mui/material": "latest",
    "@mui/styles": "latest",
    "@tauri-apps/api": "1.0.0-rc.4",
    "@testing-library/jest-dom": "latest",
    "@testing-library/react": "latest",
    "@testing-library/user-event": "latest",
    "express": "latest",
    "mysql2": "latest",
    "node": "latest",
    "react": "latest",
    "react-dom": "latest",
    "react-dropzone": "latest",
    "rimraf": "latest",
    "source-map-support": "latest",
    "typeorm": "latest",
    "typescript": "latest"
  },
  "devDependencies": {
    "@babel/core": "latest",
    "@babel/plugin-transform-modules-commonjs": "latest",
    "@babel/preset-react": "latest",
    "@mui/types": "latest",
    "@tauri-apps/cli": "1.0.0-rc.9",
    "@tauri-apps/tauricon": "github:tauri-apps/tauricon",
    "@types/express": "latest",
    "@types/jest": "latest",
    "@types/node": "latest",
    "@types/prettier": "latest",
    "@types/react": "latest",
    "@types/react-dom": "latest",
    "async": "latest",
    "dotenv": "latest",
    "jest": "latest",
    "jszip": "latest",
    "nodemon": "latest",
    "prettier": "latest",
    "react-scripts": "latest",
    "ts-node": "latest",
    "typedoc": "latest",
    "typescript": "latest",
    "yarn": "latest"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 edge version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "babel": {
    "env": {
      "test": {
        "plugins": [
          "@babel/plugin-transform-modules-commonjs"
        ]
      }
    },
    "presets": [
      "@babel/preset-env",
      "@babel/preset-typescript",
      "@babel/preset-react"
    ]
  },
  "eslintConfig": {
    "ignorePatterns": "node_modules/",
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "jest": {
    "collectCoverageFrom": [
      "**/*.{ts,tsx}",
      "!**/node_modules/**",
      "!**/build/**",
      "!**/docs/**",
      "!**/output/**",
      "!**/public/**"
    ],
    "coveragePathIgnorePatterns": [
      "/build/",
      "/dist/",
      "/docs/",
      "/public/",
      "/node_modules/",
      "/src-tauri/",
      "/src/index.tsx",
      "/src/interfaces/",
      "/src/react-app-env.d.ts",
      "/src/scripts/",
      "/src/tests/",
      "/src/typings/"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 100,
        "functions": 100,
        "lines": 100,
        "statements": 100
      }
    },
    "displayName": {
      "name": "inventory-management-platform",
      "color": "blue"
    },
    "moduleDirectories": [
      "node_modules",
      "src"
    ],
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "jsx",
      "json",
      "css",
      "gif",
      "jpg",
      "jpeg",
      "png",
      "svg"
    ],
    "moduleNameMapper": {
      "\\.(css)$": "<rootDir>/src/typings/css.d.ts",
      "\\.(gif)$": "<rootDir>/src/typings/gif.d.ts",
      "\\.(jp?eg)$": "<rootDir>/src/typings/jpg.d.ts",
      "\\.(png)$": "<rootDir>/src/typings/png.d.ts",
      "\\.(svg)$": "<rootDir>/src/typings/svg.d.ts"
    },
    "transform": {
      "^.+\\.[jt]sx?$": "babel-jest"
    }
  },
  "prettier": {
    "arrowParens": "always",
    "bracketSameLine": true,
    "bracketSpacing": true,
    "jsxSingleQuote": true,
    "requirePragma": true,
    "printWidth": 200,
    "quoteProps": "consistent",
    "semi": false,
    "singleAttributePerLine": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "none"
  }
}

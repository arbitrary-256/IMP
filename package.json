{
  "name": "inventory-management-platform",
  "version": "0.9.1",
  "license": "Unlicense",
  "description": "Inventory Management Platform",
  "productName": "IMP",
  "author": "Brandon Shockley <bms1991@gmail.com> (https://github.com/Zindrek)",
  "repository": "https://github.com/Zindrek/IMP",
  "copyright": "© 2022",
  "private": true,
  "type": "module",
  "main": "dist/index.js",
  "scripts": {
    "autodev": "clear && echo '(autodev) automatically hot-reloading environment…,' && redrum -p hot:docs hot:prettier hot:bin",
    "autopack": "clear && echo '(autopack) automatically packing release…' && npm run setup:scripts && redrun -s clean:all setup:modules package:api package:installer docs:generate",
    "clean:all": "echo '√ (clean:all) cleaning environment…' && redrun -s clean:artifacts clean:backend clean:node",
    "clean:api": "echo '√   (clean:api) cleaning /api…' && rimraf api && mkdir api",
    "clean:artifacts": "echo '√  (clean:artifacts) cleaning artifacts…' && redrun -s clean:build clean:coverage clean:docs clean:bin clean:output",
    "clean:backend": "echo '√  (clean:backend) cleaning backend data…' && redrun -s clean:api clean:db",
    "clean:build": "echo '√   (clean:build) cleaning /build…' && rimraf build && mkdir build",
    "clean:coverage": "echo '√    (clean:coverage) cleaning /coverage…' && rimraf coverage && mkdir coverage",
    "clean:docs": "echo '√     (clean:docs) cleaning /docs…' && rimraf docs && mkdir docs",
    "clean:bin": "echo '√      (clean:bin) cleaning /src-bin…' && rimraf src-bin/target src-bin/Cargo.lock",
    "clean:node": "echo '√  (clean:node) cleaning node…' && yarn clean:prettier && rimraf node_modules .VSCodeCounter package-lock.json yarn.lock yarn-error.log",
    "clean:output": "echo '√       (clean:output) cleaning /output…' && rimraf output && mkdir output",
    "clean:prettier": "echo '√ (clean:prettier) running prettier…' && yarn prettier --loglevel error --write .",
    "clean:db": "echo '√     (clean:db) cleaning /db…' && rimraf db && mkdir db",
    "hot:prettier": "echo '√ (hot:prettier) watching prettier in hot-reload development mode…' && yarn prettier --watch --loglevel error --write .",
    "hot:ui": "echo '√ (hot:ui) watching React in hot-reload development mode…' && yarn hot:prettier & yarn react-scripts start",
    "hot:bin": "echo '√ (hot:bin) watching Tauri in hot-reload development mode…' && yarn hot:prettier & tauri dev",
    "hot:docs": "echo '√ (hot:docs) watching TypeDoc in hot-reload development mode…' && yarn clean:docs & typedoc --watch",
    "docker:api": "echo '√ (docker) recreating imp_api service…' && redrun -s docker:down clean:api package:api docker:up",
    "docker:down": "echo '√ (docker) collapsing stack…' && docker-compose down --remove-orphans && docker rmi -f imp_api:alpine && docker rmi -f imp_interface:alpine",
    "docker:up": "echo '√ (docker) launching stack…' && docker-compose up --build -d",
    "docker:sql": "echo '√ (docker) recreating imp_sql service…' && redrun -s docker:down clean:sql docker:up",
    "docs:generate": "echo '√ (docs) running TypeDoc /docs…' && yarn clean:docs && typedoc",
    "docs:readme": "echo '√ (docs)' && echo '√ (docs) please run `yarn setup:scripts` once when you first clone this repo (and if needed again), and then please run:' && echo '√ (docs)' && echo '√ (docs) yarn setup' && echo '√ (docs)' && echo '√ (docs) and then please follow the next step below based on your operating system:' && echo '√ (docs) Windows:' && echo '√ (docs) please download a rust GUI installer from https://win.rustup.rs/x86_64 or https://win.rustup.rs/i686' && echo '√ (docs) Linux:' && echo '√ (docs) yarn setup:rust' && echo '√ (docs) Intel Macs:' && echo '√ (docs) yarn setup:rust' && echo '√ (docs)' && echo '√ (docs) Apple Silicon Macs: yarn setup:applesilicon' && echo '√ (docs)'",
    "package:api": "echo '√ (package) transpiling api…' && tsc src-api/impAPI.ts --skipLibCheck --removeComments --outDir api",
    "package:icon": "echo '√ (package) making icons…' && yarn tauricon --log src-bin/icons/app-icon.png --target src-bin/icons",
    "package:installer": "echo '√ (package) compiling native installer…' && echo '√  (package) …this may take a few minutes, pease be patient…' && tauri build  > /dev/null 2>&1 && echo '√ (package) moving compiled binaries to output folder' && yarn copyfiles --error --up 5 ./src-bin/target/release/bundle/**/* ./output",
    "package:interface": "echo '√ (package) transpiling interface…' && redrun -s setup:modules package:installer package:zip",
    "package:updater": "echo '√ (package) auto-updater…' && tauri signer generate",
    "package:zip": "echo '√ (package) zipping web interface…' && rimraf ./tsconfig.json && sleep 3 && yarn copyfiles --error --up 4 ./src-ui/scripts/configfiles/script/* ./ && sleep 3 && ts-node-dev -- src/scripts/webzip.ts && echo 'moving zip to output directory' && rimraf ./tsconfig.json && sleep 3 && yarn copyfiles --error --up 4 ./src-ui/scripts/configfiles/normal/* ./",
    "setup:applesilicon": "echo '√ (setup) compiling custom apple silicon toolchain from source via homebrew…' && echo '√  (setup) …this may take up to an hour on an M1 Mac mini while utilizing the entire SoC, please be patient…' && yarn setup:brew && yarn setup:modules",
    "setup:brew": "echo '√ (setup) installing homebrew…' && ./src-ui/scripts/applesilicon/brew-install.sh",
    "setup:scripts": "echo '√ (setup) installing global-scoped npm script dependencies…' && npm install -g @types/copyfiles copyfiles redrun rimraf typescript yarn",
    "setup:modules": "echo '√ (setup) installing package-scoped npm dependencies…' && yarn",
    "setup:rust": "echo '√ (setup) installing rust toolchain…' && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh",
    "setup:rustup": "echo '√ (setup) updating rust toolchain…' && cd src-bin && rustup update && cargo update && cd ..",
    "setup:unbrew": "echo '√ (setup) uninstalling homebrew…' && ./src-ui/scripts/applesilicon/brew-remove.sh",
    "test:cover": "echo '√ (test) measuring code coverage of unit tests…' && jest --coverage --passWithNoTests",
    "test:now": "echo '√ (test) running unit tests…' && jest",
    "test:watch": "echo '√ (test) watching unit tests…' && jest --watch"
  },
  "dependencies": {
    "@emotion/react": "latest",
    "@emotion/styled": "latest",
    "@fontsource/alegreya-sans-sc": "latest",
    "@mui/icons-material": "latest",
    "@mui/material": "latest",
    "@mui/styles": "latest",
    "@tauri-apps/api": "1.0.0-rc.4",
    "@testing-library/jest-dom": "latest",
    "@testing-library/react": "latest",
    "@testing-library/user-event": "latest",
    "mysql": "latest",
    "node": "latest",
    "react": "latest",
    "react-dom": "latest",
    "react-dropzone": "latest",
    "source-map-support": "latest",
    "ts-node-dev": "latest",
    "typescript": "latest"
  },
  "devDependencies": {
    "@babel/core": "latest",
    "@babel/plugin-transform-modules-commonjs": "latest",
    "@babel/preset-react": "latest",
    "@mui/types": "latest",
    "@tauri-apps/cli": "1.0.0-rc.9",
    "@tauri-apps/tauricon": "github:tauri-apps/tauricon",
    "@types/copyfiles": "latest",
    "@types/express": "latest",
    "@types/jest": "latest",
    "@types/mysql": "latest",
    "@types/prettier": "latest",
    "@types/react": "latest",
    "@types/react-dom": "latest",
    "async": "latest",
    "copyfiles": "latest",
    "dotenv": "latest",
    "express": "latest",
    "jest": "latest",
    "jszip": "latest",
    "nodemon": "latest",
    "prettier": "latest",
    "react-scripts": "latest",
    "typedoc": "latest"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 edge version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "babel": {
    "env": {
      "test": {
        "plugins": [
          "@babel/plugin-transform-modules-commonjs"
        ]
      }
    },
    "presets": [
      "@babel/preset-env",
      "@babel/preset-typescript",
      "@babel/preset-react"
    ]
  },
  "eslintConfig": {
    "ignorePatterns": [
      "api/",
      "node_modules/",
      "database/"
    ],
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "jest": {
    "collectCoverageFrom": [
      "**/*.{ts,tsx}",
      "!**/node_modules/**",
      "!**/build/**",
      "!**/docs/**",
      "!**/output/**",
      "!**/public/**"
    ],
    "coveragePathIgnorePatterns": [
      "/build/",
      "/dist/",
      "/docs/",
      "/public/",
      "/node_modules/",
      "/src-bin/",
      "/src-ui/index.tsx",
      "/src-ui/interfaces/",
      "/src-ui/react-app-env.d.ts",
      "/src-ui/scripts/",
      "/src-ui/tests/",
      "/src-ui/typings/"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 100,
        "functions": 100,
        "lines": 100,
        "statements": 100
      }
    },
    "displayName": {
      "name": "inventory-management-platform",
      "color": "blue"
    },
    "moduleDirectories": [
      "node_modules",
      "src-api",
      "src-bin",
      "src-ui"
    ],
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "jsx",
      "json",
      "css",
      "gif",
      "jpg",
      "jpeg",
      "png",
      "svg"
    ],
    "moduleNameMapper": {
      "\\.(css)$": "<rootDir>/src-ui/typings/css.d.ts",
      "\\.(gif)$": "<rootDir>/src-ui/typings/gif.d.ts",
      "\\.(jp?eg)$": "<rootDir>/src-ui/typings/jpg.d.ts",
      "\\.(png)$": "<rootDir>/src-ui/typings/png.d.ts",
      "\\.(svg)$": "<rootDir>/src-ui/typings/svg.d.ts"
    },
    "transform": {
      "^.+\\.[jt]sx?$": "babel-jest"
    }
  },
  "prettier": {
    "arrowParens": "always",
    "bracketSameLine": true,
    "bracketSpacing": true,
    "filepath": ".",
    "jsxSingleQuote": true,
    "requirePragma": true,
    "parser": "babel-ts",
    "printWidth": 200,
    "quoteProps": "consistent",
    "semi": false,
    "singleAttributePerLine": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "none"
  }
}

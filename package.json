{
  "name": "inventory-management-platform",
  "version": "0.9.1",
  "license": "Unlicense",
  "description": "Inventory Management Platform",
  "productName": "IMP",
  "author": "Brandon Shockley <bms1991@gmail.com> (https://github.com/Zindrek)",
  "repository": "https://github.com/Zindrek/IMP",
  "copyright": "Â© 2022",
  "private": true,
  "type": "module",
  "main": "dist/index.js",
  "scripts": {
    "auto": "npm run auto:prep && npm run auto:output && npm run auto:message",
    "m1-auto": "npm run m1-auto:prep && npm run m1-auto:output && npm run auto:message",
    "readme": "echo '(ðŸ‘ºreadme)' && echo '(ðŸ‘ºreadme) install rust for your operating system' && echo '(ðŸ‘ºreadme)' && echo '(ðŸ‘ºreadme) Windows:' && echo '(ðŸ‘ºreadme) https://win.rustup.rs/x86_64' && echo '(ðŸ‘ºreadme) https://win.rustup.rs/i686' && echo '(ðŸ‘ºreadme)' && echo '(ðŸ‘ºreadme) Linux / macOS with Intel processors:' && echo '(ðŸ‘ºreadme) npm run installRust' && echo '(ðŸ‘ºreadme)' && echo '(ðŸ‘ºreadme) Linux / macOS with ARM processors:' && echo '(ðŸ‘ºreadme) not yet supported' && echo '(ðŸ‘ºreadme)' && echo '(ðŸ‘ºreadme) then run `npm run auto`' && echo '(ðŸ‘ºreadme)' ",
    "develop": "tauri dev",
    "build": "tauri build",
    "clean": "npm rm -g rimraf && npm install -g rimraf && rimraf tauri/target tauri/Cargo.lock build output .VSCodeCounter package-lock.json node_modules && mkdir build output node_modules",
    "refreshGlobalYarn": "npm remove -g yarn && npm install -g yarn && yarn",
    "refreshAppleARMYarn": "arch -x86_64 /bin/bash -c $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh) && arch -x86_64 /bin/bash -c '$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)' && echo 'installed Homebrew' && arch -x86_64 brew install -s -d -v gcc && arch -x86_64 brew install -s -d -v pkg-config && arch -x86_64 brew install -s -d -v node  && arch -x86_64 brew install -s -d -v yarn && arch -x86_64 brew install -s -d -v rustup-init && echo 'compiled toolchain' && arch -x86_64 brew install -s -d -v libpng && arch -x86_64 brew install -s -d -v jpeg && arch -x86_64 brew install -s -d -v giflib && arch -x86_64 brew install -s -d -v cairo && arch -x86_64 brew install -s -d -v pango && arch -x86_64 brew install -s -d -v librsvg && arch -x86_64 brew install -s -d -v vips && arch -x86_64 brew link yarn && echo 'compiled libraries' && yarn",
    "installRust": "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh",
    "updateRust": "cd tauri && rustup update && cargo update && cd ..",
    "bundle": "copyfiles --error --up 5 ./tauri/target/release/bundle/**/* ./output",
    "Smode": "copyfiles --error --up 4 ./src/scripts/configfiles/script/* ./&& echo '(ðŸ‘º) scripting mode' && sleep 3",
    "Nmode": "copyfiles --error --up 4 ./src/scripts/configfiles/normal/* ./ && echo '(ðŸ‘º) normal mode' && sleep 3'",
    "zip": "ts-node-dev -- src/scripts/webzip.ts && echo '(ðŸ‘ºzip) output zipped web directory'",
    "auto:prep": "clear && echo '(ðŸ‘ºm1-auto) Step 1 of 2: Cleaning and rebuilding development environment' && npm run clean && npm run refreshGlobalYarn && yarn updateRust",
    "m1-auto:prep": "clear && echo '(ðŸ‘ºm1-auto) Step 1 of 2: Cleaning and rebuilding development environment' && npm run clean && npm run refreshAppleARMYarn && yarn updateRust",
    "auto:output": "clear && echo '(ðŸ‘ºauto) Step 2 of 2: Building local operating system binaries into distributable installer' && yarn build && yarn bundle",
    "m1-auto:output": "clear && echo '(ðŸ‘ºauto) Step 2 of 2: Building local operating system binaries into distributable installer' && yarn build && yarn bundle",
    "auto:message": "clear && echo '(ðŸ‘ºauto) Complete:' && yarn readme && echo '(ðŸ‘ºauto) Run `yarn develop` to start the application'",

    "icon": "yarn tauricon --log tauri/icons/app-icon.png --target tauri/icons",
    "sign": "tauri signer generate"
  },
  "dependencies": {
    "@emotion/react": "latest",
    "@emotion/styled": "latest",
    "@fontsource/alegreya-sans-sc": "latest",
    "@mui/icons-material": "latest",
    "@mui/material": "latest",
    "@mui/styles": "latest",
    "@tauri-apps/api": "1.0.0-rc.5",
    "@testing-library/jest-dom": "latest",
    "@testing-library/react": "latest",
    "@testing-library/user-event": "latest",
    "mysql": "latest",
    "node": "latest",
    "react": "latest",
    "react-dom": "latest",
    "react-dropzone": "latest",
    "source-map-support": "latest"
  },
  "devDependencies": {
    "@babel/core": "latest",
    "@babel/plugin-transform-modules-commonjs": "latest",
    "@babel/preset-react": "latest",
    "@mui/types": "latest",
    "@tauri-apps/cli": "1.0.0-rc.10",
    "@tauri-apps/tauricon": "github:tauri-apps/tauricon",
    "@types/copyfiles": "latest",
    "@types/jest": "latest",
    "@types/mysql": "latest",
    "@types/prettier": "latest",
    "@types/react": "latest",
    "@types/react-dom": "latest",
    "async": "latest",
    "copyfiles": "latest",
    "jest": "latest",
    "jszip": "latest",
    "prettier": "latest",
    "react-scripts": "latest",
    "ts-node-dev": "latest",
    "typedoc": "latest",
    "typescript": "latest"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 edge version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "babel": {
    "env": {
      "test": {
        "plugins": [
          "@babel/plugin-transform-modules-commonjs"
        ]
      }
    },
    "presets": [
      "@babel/preset-env",
      "@babel/preset-typescript",
      "@babel/preset-react"
    ]
  },
  "eslintConfig": {
    "ignorePatterns": [
      "node_modules/"
    ],
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "jest": {
    "collectCoverageFrom": [
      "**/*.{ts,tsx}",
      "!**/node_modules/**",
      "!**/build/**",
      "!**/docs/**",
      "!**/output/**",
      "!**/public/**"
    ],
    "coveragePathIgnorePatterns": [
      "/build/",
      "/dist/",
      "/docs/",
      "/public/",
      "/node_modules/",
      "/tauri/",
      "/src-ui/index.tsx",
      "/src-ui/interfaces/",
      "/src-ui/react-app-env.d.ts",
      "/src-ui/scripts/",
      "/src-ui/tests/",
      "/src-ui/typings/"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 100,
        "functions": 100,
        "lines": 100,
        "statements": 100
      }
    },
    "displayName": {
      "name": "inventory-management-platform",
      "color": "blue"
    },
    "moduleDirectories": [
      "node_modules",
      "tauri",
      "src-ui"
    ],
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "jsx",
      "json",
      "css",
      "gif",
      "jpg",
      "jpeg",
      "png",
      "svg"
    ],
    "moduleNameMapper": {
      "\\.(css)$": "<rootDir>/src-ui/typings/css.d.ts",
      "\\.(gif)$": "<rootDir>/src-ui/typings/gif.d.ts",
      "\\.(jp?eg)$": "<rootDir>/src-ui/typings/jpg.d.ts",
      "\\.(png)$": "<rootDir>/src-ui/typings/png.d.ts",
      "\\.(svg)$": "<rootDir>/src-ui/typings/svg.d.ts"
    },
    "transform": {
      "^.+\\.[jt]sx?$": "babel-jest"
    }
  },
  "prettier": {
    "arrowParens": "always",
    "bracketSameLine": true,
    "bracketSpacing": true,
    "filepath": ".",
    "jsxSingleQuote": true,
    "requirePragma": true,
    "parser": "babel-ts",
    "printWidth": 200,
    "quoteProps": "consistent",
    "semi": false,
    "singleAttributePerLine": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "none"
  }
}
